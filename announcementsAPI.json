{
  "openapi": "3.0.1",
  "info": {
    "title": "AnnouncementsAPI",
    "version": "v1"
  },
  "paths": {
    "/announcements": {
      "get": {
        "tags": [
          "AnnouncementsEndpoints"
        ],
        "summary": "Gets all announcements filtered with query parameters",
        "parameters": [
          {
            "name": "species",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "breeds",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "locations",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "minAge",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "maxAge",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "shelterNames",
            "in": "query",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Client error"
          }
        }
      },
      "post": {
        "tags": [
          "AnnouncementsEndpoints"
        ],
        "summary": "Post new announcement. Shelter role required. Gets shelterId of pet from auth claims.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostAnnouncementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Client error"
          },
          "401": {
            "description": "Client error"
          }
        }
      }
    },
    "/shelter/announcements": {
      "get": {
        "tags": [
          "AnnouncementsEndpoints"
        ],
        "summary": "Gets all announcements for shelter. Requires shelter role. Gets shelter id from auth claims.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/announcements/{announcementId}": {
      "get": {
        "tags": [
          "AnnouncementsEndpoints"
        ],
        "summary": "Gets announcement by id.",
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Client error"
          },
          "401": {
            "description": "Client error"
          }
        }
      },
      "put": {
        "tags": [
          "AnnouncementsEndpoints"
        ],
        "summary": "Updates announcements. Null values are omitted. Requires admin (any announcement) or shelter (only matching shelterId) role. ",
        "parameters": [
          {
            "name": "announcementId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutAnnouncementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Client error"
          },
          "401": {
            "description": "Client error"
          }
        }
      }
    },
    "/pet": {
      "post": {
        "tags": [
          "PetEndpoints"
        ],
        "summary": "Posts new pet. Requires shelter role. Gets shelter id from auth claims.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostPetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Client error"
          }
        }
      }
    },
    "/shelter/pets": {
      "get": {
        "tags": [
          "PetEndpoints"
        ],
        "summary": "Gets all pets for shelter. Requires shelter role. Gets shelter id from auth claims.",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PetResponse"
                }
              }
            },
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": [
          "PetEndpoints"
        ],
        "summary": "Gets pet by id.",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Client error"
          }
        }
      },
      "put": {
        "tags": [
          "PetEndpoints"
        ],
        "summary": "Updates pet. Null values are omitted. Requires admin (any pet) or shelter (only matching shelterId) role. ",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutPetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Client error"
          },
          "401": {
            "description": "Client error"
          }
        }
      }
    },
    "/pet/{petId}/photo": {
      "post": {
        "tags": [
          "PetEndpoints"
        ],
        "summary": "Uploads new photo for pet. Requires shelter role. Gets shelter id from auth claims.",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "style": "simple",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Client error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PostAnnouncementRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "petId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "PostPetRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "sex": {
            "$ref": "#/components/schemas/Sex"
          },
          "species": {
            "type": "string"
          },
          "breed": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "photoUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PetResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "sex": {
            "$ref": "#/components/schemas/Sex"
          },
          "species": {
            "type": "string"
          },
          "breed": {
            "type": "string"
          },
          "birthday": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "photoUrl": {
            "type": "string",
            "format": "uri",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/PetStatus"
          }
        },
        "additionalProperties": false
      },
      "PutAnnouncementRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/Status",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutPetRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "species": {
            "type": "string",
            "nullable": true
          },
          "breed": {
            "type": "string",
            "nullable": true
          },
          "birthday": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/PetStatus",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Status": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "Sex": {
        "enum": [
          "unknown",
          "male",
          "female",
          "doesNotApply"
        ],
        "type": "string"
      },
      "PetStatus": {
        "enum": [
          "active",
          "deleted"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. \r\n\r\n Enter 'Bearer' [space] and then your token in the text input below.\r\n\r\nExample: \"Bearer 1safsfsdfdfd\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}